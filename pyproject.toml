[project]
name = "pgs-solver"
description = "A CUDA PGS Solver with Multi-GPU, sparse matrices and DLPack support."
authors = [
    { name = "Filippo Luca Ferretti", email = "filippoluca.ferretti@outlook.com" },
]
version = "0.1.0"
license = "GPL-3.0-only"
license-files = ["LICENSE"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Programming Language :: C++",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
]
readme = { file = "README.md", content-type = "text/markdown" }
dependencies = [
    "numpy>=2.2.0",
    "jax>=0.5.0",
    "jaxlib>=0.5.0",
]

[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "wheel",
    "setuptools>=80",
    "setuptools_scm[toml]>=9.0",
    "cmake-build-extension>=0.4",
]

[tool.setuptools_scm]
local_scheme = "dirty-tag"

[tool.cibuildwheel]
build-frontend = "build"

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.tasks]
# The pypi-dependencies section above will automatically install the package
# via `pip install -e .` which runs CMake through setup.py

# Test without rebuilding (package already installed by pixi)
test = "pytest tests/ -v"

# Force rebuild after C++ changes
rebuild = { cmd = "pip install --force-reinstall --no-deps -e ." }

# Additional tasks
clean = "rm -rf .build build/ python/pgs_solver.egg-info/ python/pgs_solver/__pycache__/"
benchmark = "python examples/benchmark.py --all"
info = """
echo '=== Build Environment ===' && \
gcc --version | head -1 && \
nvcc --version | grep release && \
python --version && \
python -c 'import pgs_solver; print(\"pgs_solver imported successfully\")'
"""

[tool.pixi.dependencies]
pytest = "*"
pytest-cov = "*"
cmake = "*"
cuda-nvcc = "*"
jax = ">=0.7.2"
jaxlib = { version = ">=0.7.2", build = "*cuda*" }
dlpack = "*"
cuda-cudart-dev = "*"
libcusparse-dev = "*"
python = "*"
pip = "*"
numpy = ">=2.3.4"
pybind11 = "*"
matplotlib = "*"
# Pin GCC to version 14 (CUDA 12.8 doesn't support GCC 15+)
cxx-compiler = "*"
c-compiler = "*"
gxx = "14.*"
gcc = "14.*"

[tool.pixi.pypi-dependencies]
pgs-solver = { path = ".", editable = true }
